// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id          String    @id @default(cuid())
  title       String
  gifUrl      String?
  imageUrls   String[] 
  createdBy   User      @relation(fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Comment     Comment[]
  Like        Like[]
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique 
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
   createdAt DateTime @default(now()) 

  Comment   Comment[]
  following UserFollowing[] @relation("UserToFollowing")
  followers UserFollowing[] @relation("UserToFollower")

  Like Like[]
  
}

model UserFollowing {
  id          String @id @default(cuid())
  userId      String
  followingId String
  user        User   @relation("UserToFollowing", fields: [userId], references: [id])
  following   User   @relation("UserToFollower", fields: [followingId], references: [id])

  createdAt DateTime @default(now())

  @@unique([userId, followingId])
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  createdAt   DateTime @default(now())
  postId      String
  post        Post     @relation(fields: [postId], references: [id])
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String
}
model Like {
  userId  String
  postId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  post   Post   @relation(fields: [postId], references: [id])

  @@id([userId, postId])
}
// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
